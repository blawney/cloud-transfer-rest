[DEFAULT]


[dropbox]
# These are settings that are specific only to Dropbox, regardless of the compute environment (AWS, GCP)

# a docker image that actually runs the download process (i.e. downloads from Dropbox and pushes to 
# some cloud-based storage)
docker_image = dbx_docker_img



[google_drive]
# These are settings that are specific only to Drive, regardless of the compute environment (AWS, GCP)
drive_image = drive_img



[google]
# These are settings specific to running an download in Google environment regardless of the source
# (whether from Dropbox, Drive, etc.)

# the name of the image for the VM
source_disk_image = <some container-ready image>

# the machine-spec:
machine_type = n1-small

# minimum size of the disk (in gigabytes)
min_disk_size = 10

# if we have a large file that exceeds the minimum disk size,
# then make the disk size to be this many times the filesize (approx)
# e.g. if the file is 12Gb, setting disk_size_factor = 2 would create a
# VM with size 24Gb
disk_size_factor = 2



[dropbox_in_google]
# These are settings that are specific to running an download to Google Storage FROM Dropbox

# this path is RELATIVE to a bucket specified in your settings.py file:
startup_script_path = downloader_startup_scripts/google/download_to_dropbox.py

# a prefix for the VM name
# if this variable is foo-bar, then the VMs created will be something like
# foo-bar-<datetime>-<integer>
# The attempt here is to come up with a unique name
instance_name_prefix = dropbox-download



[drive_in_google]
# These are settings that are specific to running an download to Google Storage FROM Google Drive

# this path is RELATIVE to a bucket specified in your settings.py file:
startup_script_path = downloader_startup_scripts/google/download_to_drive.py

# a prefix for the VM name
# if this variable is foo-bar, then the VMs created will be something like
# foo-bar-<datetime>-<integer>
# The attempt here is to come up with a unique name
instance_name_prefix = drive-transfer
